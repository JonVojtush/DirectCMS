package archives

import "syscall/js"

func convertPost2JS(post interface{}) js.Value {
	jsObj := js.Global().Get("Object").New()
	for key, value := range post.(map[string]interface{}) {
		jsObj.Set(key, js.ValueOf(value))
	}
	return jsObj
}

func fetchPostList(postList []Post) js.Value {
	jsPostList := js.Global().Get("Array").New() // Create an array to hold the objects

	for _, post := range postList {
		jsPost := convertPost2JS(post)
		jsPostList.SetIndex(jsPostList.Length(), jsPost)
	}
	return jsPostList
}

func servePost(w http.ResponseWriter, r *http.Request) {
	var (
		content    []byte
		err        error
		mediaFiles []fs.DirEntry
		parts      []string
	)

	// Extract postId from the request URL
	if parts = strings.Split(r.URL.Path, "/"); len(parts) < 3 { // BaseURL, posts, postid
		http.NotFound(w, r)
		return
	}
	postId := parts[2]

	// Construct the full path to the content and media files
	contentPath := filepath.Join("posts", postId, "content.md")
	mediaDir := filepath.Join("posts", postId)

	// Check if the content file exists
	if _, err = os.Stat(contentPath); os.IsNotExist(err) {
		http.NotFound(w, r)
		return
	}

	// Serve the markdown content
	w.Header().Set("Content-Type", "text/markdown; charset=utf-8")
	if content, err = os.ReadFile(contentPath); err != nil {
		http.Error(w, "Failed to read content file", http.StatusInternalServerError)
		return
	}
	w.Write(content)

	// List and serve media files in the post directory
	if mediaFiles, err = os.ReadDir(mediaDir); err == nil {
		for _, file := range mediaFiles {
			if !file.IsDir() && strings.HasSuffix(file.Name(), ".jpg") || strings.HasSuffix(file.Name(), ".png") || strings.HasSuffix(file.Name(), ".mp4") {
				http.ServeFile(w, r, filepath.Join(mediaDir, file.Name()))
			}
		}
	}
}

func main() {
	js.Global().Set("fetchPostList", func() js.Value { return fetchPostList(postList) })
}
